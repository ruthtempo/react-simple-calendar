{"mappings":"AAKA,oBAAoB,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;AAE7C;IACE,GAAG,EAAE,IAAI,CAAC;IACV,aAAa,EAAE,OAAO,CAAC;IACvB,cAAc,EAAE,OAAO,CAAA;CACxB;AA+CD,QAAA,MAAM,gCAAiC,MAAM,KAAG,WACd,CAAA;AAElC,QAAA,MAAM,wBAAyB,cAAc,KAAG,WAGzC,CAAA;AAEP,QAAA,MAAM,iCACS,IAAI,aACN,MAAM,IAAI,aACV,MAAM,IAAI,KACpB,WAMF,CAAA;AAED,QAAA,MAAM,+BAAgC,WAAW,gBAGvC,CAAA;AAEV,OAAO,MAAM,cAAe;IAC1B,aAAa,CAAC,EAAE,2BAA2B,CAAC;IAC5C,SAAS,CAAC,EAAE,uBAAuB,CAAC;IACpC,gBAAgB,CAAC,EAAE,wBAAwB,CAAC;IAC5C,WAAW,CAAC,EAAE,yBAAyB,CAAC;IACxC,YAAY,CAAC,EAAE,YAAY,CAAC;IAC5B,aAAa,CAAC,EAAE,MAAM,EAAE,CAAA;CACzB,gBAwCA,CAAA","sources":["src/src/index.tsx","src/index.tsx"],"sourcesContent":[null,"import React, { useState } from \"react\"\nimport { differenceInCalendarDays, endOfMonth, endOfWeek, getWeeksInMonth, isSameDay, isSameMonth, isToday } from \"date-fns\";\nimport { add, startOfMonth, sub, getDate, startOfWeek } from \"date-fns/esm\";\nimport format from \"date-fns/format\";\n\ntype WeekStartsOn = 0 | 1 | 2 | 3 | 4 | 5 | 6\n\ninterface CalendarRecord {\n  day: Date,\n  isCurrentDate: boolean,\n  isCurrentMonth: boolean\n}\n\nfunction getDaysArray(selectedMonth: Date, weekStartsOn: WeekStartsOn): CalendarRecord[] {\n  const start = startOfMonth(selectedMonth)\n  const begginingOfWeek = startOfWeek(start, { weekStartsOn })\n\n  const end = endOfMonth(selectedMonth)\n  const endOfTheWeek = endOfWeek(end, { weekStartsOn })\n\n  const daysCount = differenceInCalendarDays(endOfTheWeek, begginingOfWeek)\n  const daysInMonth: CalendarRecord[] = []\n\n  for (let i = 0; i <= daysCount; i++) {\n    const currentDate = add(begginingOfWeek, { days: i })\n\n    daysInMonth.push({\n      day: currentDate,\n      isCurrentDate: isToday(currentDate),\n      isCurrentMonth: isSameMonth(currentDate, selectedMonth)\n    })\n  }\n  return daysInMonth\n}\n\nfunction getWeeks(\n  days: CalendarRecord[],\n  currentDate: Date,\n  weekStartsOn: WeekStartsOn\n): CalendarRecord[][] {\n  const numberOfWeeks = getWeeksInMonth(currentDate, { weekStartsOn })\n  const month: CalendarRecord[][] = []\n  let counter = 0\n  //weeks\n  for (let j = 1; j <= numberOfWeeks; j++) {\n    const week: CalendarRecord[] = []\n\n    //days\n    for (let i = 0; i <= 6; i++) {\n      week.push(days[counter])\n      counter++\n    };\n    month.push(week)\n  }\n  return month\n}\n\n\nconst defaultRenderWeekday = (weekday: string): JSX.Element =>\n  <td key={weekday}>{weekday}</td>\n\nconst defaultRenderDay = (day: CalendarRecord): JSX.Element =>\n  <td key={day.day.toISOString()}>\n    {getDate(day.day)}\n  </td>\n\nconst defaultMonthTitle = (\n  currentDate: Date,\n  prevMonth: () => void,\n  nextMonth: () => void,\n): JSX.Element => (\n  <div style={{ display: 'flex' }}>\n    <button onClick={prevMonth}>prev</button>\n    <h3>{format(currentDate, 'MMMM yyyy')}</h3>\n    <button onClick={nextMonth} >next</button>\n  </div>\n)\n\nconst defaultRenderTable = (children: JSX.Element) =>\n  <table>\n    {children}\n  </table>\n\nexport const Calendar = (p: {\n  renderWeekday?: typeof defaultRenderWeekday,\n  renderDay?: typeof defaultRenderDay,\n  renderMonthTitle?: typeof defaultMonthTitle,\n  renderTable?: typeof defaultRenderTable,\n  weekStartsOn?: WeekStartsOn,\n  weekDayLabels?: string[]\n}) => {\n  const weekdays = [\"MON\", \"TUE\", \"WED\", \"THU\", \"FRI\", \"SAT\", \"SUN\"];\n\n  const [currentDate, setCurrentDate] = useState(new Date())\n  const daysInMonth = getDaysArray(currentDate, p.weekStartsOn ?? 1)\n  const rows = getWeeks(daysInMonth, currentDate, p.weekStartsOn ?? 1)\n\n  function nextMonth() {\n    setCurrentDate(add(currentDate, { months: 1 }))\n  }\n\n  function prevMonth() {\n    setCurrentDate(sub(currentDate, { months: 1 }))\n  }\n\n  return (\n    (p.renderTable ?? defaultRenderTable)(\n      <>\n        <thead>\n          <tr>\n            <th colSpan={7}>\n              {(p.renderMonthTitle ?? defaultMonthTitle)(currentDate, prevMonth, nextMonth)}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            {(p.weekDayLabels ?? weekdays).map(p.renderWeekday ?? defaultRenderWeekday)}\n            {/* <td key={weekday}><small>{weekday}</small></td> */}\n          </tr>\n          {rows.map(row => (\n            <tr key={row[0].day.toISOString()} >\n              {row.map(p.renderDay ?? defaultRenderDay)}\n              {/* {row.map(day => (p.renderDay ?? defaultRenderDay)(day))} */}\n            </tr>\n          ))}\n        </tbody>\n      </>\n    )\n  )\n}\n"],"names":[],"version":3,"file":"types.d.ts.map"}